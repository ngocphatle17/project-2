import threading
import time
import random

NUM_TELLERS = 3
NUM_CUSTOMERS = 50

bank_open = threading.Event()
safe_semaphore = threading.Semaphore(2)
manager_semaphore = threading.Semaphore(1)
door_semaphore = threading.Semaphore(2)

teller_ready = [threading.Semaphore(0) for _ in range(NUM_TELLERS)]
customer_ready = [threading.Semaphore(0) for _ in range(NUM_CUSTOMERS)]
transaction_ready = [threading.Semaphore(0) for _ in range(NUM_CUSTOMERS)]
transaction_done = [threading.Semaphore(0) for _ in range(NUM_CUSTOMERS)]
customer_left = [threading.Semaphore(0) for _ in range(NUM_CUSTOMERS)]

customer_queue = []
queue_lock = threading.Lock()
teller_available = [True] * NUM_TELLERS
teller_customer_map = [None] * NUM_TELLERS

def log(thread_type, id, target, msg):
    if target is not None:
        print(f"{thread_type} {id} [{target}]: {msg}")
    else:
        print(f"{thread_type} {id} []: {msg}")

class Teller(threading.Thread):
    def __init__(self, id):
        super().__init__()
        self.id = id

    def run(self):
        log("Teller", self.id, None, "ready to serve")
        log("Teller", self.id, None, "waiting for a customer")
        bank_open.wait()

        while True:
            teller_ready[self.id].acquire()

            with queue_lock:
                if not customer_queue:
                    break
                cust_id, transaction = customer_queue.pop(0)
                teller_customer_map[self.id] = (cust_id, transaction)
                teller_available[self.id] = False

            log("Customer", cust_id, f"Teller {self.id}", "selects teller")
            log("Customer", cust_id, f"Teller {self.id}", "introduces itself")
            log("Teller", self.id, f"Customer {cust_id}", "serving a customer")
            log("Teller", self.id, f"Customer {cust_id}", "asks for transaction")
            customer_ready[cust_id].release()
            transaction_ready[cust_id].acquire()

            if transaction == "withdrawal":
                log("Teller", self.id, f"Customer {cust_id}", "handling withdrawal transaction")
                log("Teller", self.id, None, "going to the manager")
                with manager_semaphore:
                    log("Teller", self.id, None, "getting manager's permission")
                    time.sleep(random.uniform(0.005, 0.03))
                    log("Teller", self.id, None, "got manager's permission")
            else:
                log("Teller", self.id, f"Customer {cust_id}", "handling deposit transaction")

            log("Teller", self.id, f"Customer {cust_id}", "going to safe")
            with safe_semaphore:
                log("Teller", self.id, None, "enter safe")
                time.sleep(random.uniform(0.01, 0.05))
                log("Teller", self.id, None, "leaving safe")

            log("Teller", self.id, f"Customer {cust_id}", f"finishes {transaction} transaction.")
            log("Teller", self.id, f"Customer {cust_id}", "wait for customer to leave.")
            transaction_done[cust_id].release()
            customer_left[cust_id].acquire()
            teller_available[self.id] = True
            log("Teller", self.id, None, "waiting for a customer")

        log("Teller", self.id, None, "leaving for the day")

class Customer(threading.Thread):
    def __init__(self, id):
        super().__init__()
        self.id = id
        self.transaction = random.choice(["deposit", "withdrawal"])

    def run(self):
        log("Customer", self.id, None, f"wants to perform a {self.transaction} transaction")
        time.sleep(random.uniform(0.0, 0.1))

        log("Customer", self.id, None, "going to bank.")
        door_semaphore.acquire()
        log("Customer", self.id, None, "entering bank.")
        log("Customer", self.id, None, "getting in line.")

        with queue_lock:
            customer_queue.append((self.id, self.transaction))
            for i in range(NUM_TELLERS):
                if teller_available[i]:
                    teller_ready[i].release()
                    teller_available[i] = False
                    break

        log("Customer", self.id, None, "selecting a teller.")
        customer_ready[self.id].acquire()
        log("Customer", self.id, f"Teller {self.find_teller()}", f"asks for {self.transaction} transaction")
        transaction_ready[self.id].release()
        transaction_done[self.id].acquire()

        log("Customer", self.id, f"Teller {self.find_teller()}", "leaves teller")
        log("Customer", self.id, None, "goes to door")
        log("Customer", self.id, None, "leaves the bank")
        customer_left[self.id].release()
        door_semaphore.release()

    def find_teller(self):
        for i, pair in enumerate(teller_customer_map):
            if pair is not None and pair[0] == self.id:
                return i
        return "?"
